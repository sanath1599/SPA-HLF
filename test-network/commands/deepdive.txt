Deep Dive
Instructions: 
1.	Make sure you watch over the logs to check what is happening with various docker instances when the commands are executed
2.	Try and connect to the theory we discussed in the initial days
3.	Always refer to the network.sh and the corresponding shell scripts to understand from the comments what is happening
4.	To watch for logs in the console, make changes to attach the docker logs to console


In the test network folder do the following:

################################# Generate Certificates and System Channel ###############################################

1.	Set the Config Path
	export PATH=${PWD}/../bin:${PWD}:$PATH
	export FABRIC_CFG_PATH=${PWD}/configtx

2.	Create the Certificates for Org1
	cryptogen generate --config=./organizations/cryptogen/crypto-config-org1.yaml --output="organizations"

3.	Create the certificates for Org2
	cryptogen generate --config=./organizations/cryptogen/crypto-config-org2.yaml --output="organizations"

4.	Create Certificates for OrdererOrg
	cryptogen generate --config=./organizations/cryptogen/crypto-config-orderer.yaml --output="organizations"

5.	Generate the Genesis Block
	configtxgen -profile TwoOrgsOrdererGenesis -channelID system-channel -outputBlock ./system-genesis-block/genesis.block

6.	Start the docker containers
	IMAGE_TAG=latest docker-compose -f docker/docker-compose-test-net.yaml -f docker/docker-compose-couch.yaml up

############################################ Create Channel #####################################################

7.	Open a new Terminal
	change directory to test-network

8.	Set the Config Path
	export PATH=${PWD}/../bin:${PWD}:$PATH
	export FABRIC_CFG_PATH=${PWD}/configtx
	export CHANNEL_NAME=mychannel

9.	Copy some pre-requisites
	cp ../config/core.yaml ./configtx/.

10.	Create the Channel Transaction
	configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/$CHANNEL_NAME.tx -channelID $CHANNEL_NAME

11.	Create the anchor peer transaction for Org1
 	configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/HDFCMSPanchors.tx -channelID $CHANNEL_NAME -asOrg HDFCMSP

12.	Create the anchor peer transaction for Org2
 	configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/SBIMSPanchors.tx -channelID $CHANNEL_NAME -asOrg SBIMSP

13.	Set the context: to run commands as Org1 use 1 as argument 
 	source ./scripts/setChannelContext.sh 1

14.	Create the channel 
 	peer channel create -o localhost:7050 -c $CHANNEL_NAME --ordererTLSHostnameOverride orderer.example.com -f ./channel-artifacts/${CHANNEL_NAME}.tx --outputBlock ./channel-artifacts/${CHANNEL_NAME}.block --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA

15.	Join Org1 to channel
 	peer channel join -b ./channel-artifacts/$CHANNEL_NAME.block

16.	Join Org2 to channel
 	source ./scripts/setChannelContext.sh 2
	peer channel join -b ./channel-artifacts/$CHANNEL_NAME.block

17.	Update Anchor peer for Org1
 	source ./scripts/setChannelContext.sh 1
 	peer channel update -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c $CHANNEL_NAME -f ./channel-artifacts/${CORE_PEER_LOCALMSPID}anchors.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA

18.	Update Anchor peer for Org2
    source ./scripts/setChannelContext.sh 2
 	peer channel update -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c $CHANNEL_NAME -f ./channel-artifacts/${CORE_PEER_LOCALMSPID}anchors.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA


############################################ Deploy Chaincode #####################################################
19.	 Update the environment variable to configure use of GoLang Chaincode
 	source ./scripts/setGoLangContext.sh
 	export FABRIC_CFG_PATH=${PWD}/configtx
 	export CHANNEL_NAME=mychannel

20.	Package the chaincode
 	source ./scripts/setChannelContext.sh 1
 	peer lifecycle chaincode package spa-pdc.tar.gz --path ${CC_SRC_PATH} --lang ${CC_RUNTIME_LANGUAGE} --label spa-pdc_${VERSION}

21.	Check if the package is created; spa-pdc.tar.gz file should be seen.
 	ls

22.	Install the chaincode on peer of Org1
 	peer lifecycle chaincode install spa-pdc.tar.gz

23.	Install the chaincode on peer of Org2
 	source ./scripts/setChannelContext.sh 2
 	peer lifecycle chaincode install spa-pdc.tar.gz

24.	Query for Installed package
	peer lifecycle chaincode queryinstalled 2>&1 | tee outfile

25.	Set the PACKAGE_ID value
 	source ./scripts/setPackageID.sh outfile
26.	Approve the Chaincode as Org1
 	source ./scripts/setChannelContext.sh 1
 	peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name spa-pdc --version ${VERSION} --init-required --package-id ${PACKAGE_ID} --sequence ${VERSION} --collections-config ${PWD}/../spa-chaincode-pdc/collection-config.json

27.	Check for commitrediness as Org1
 	peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name spa-pdc --version ${VERSION} --sequence ${VERSION} --output json --init-required --collections-config ${PWD}/../spa-chaincode-pdc/collection-config.json

28.	Check for commitrediness as Org2
 	source ./scripts/setChannelContext.sh 2
 	peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name spa-pdc --version ${VERSION} --sequence ${VERSION} --output json --init-required --collections-config ${PWD}/../spa-chaincode-pdc/collection-config.json

29.	Approve the Chaincode as Org2
 	peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name spa-pdc --version ${VERSION} --init-required --package-id ${PACKAGE_ID} --sequence ${VERSION} --collections-config ${PWD}/../spa-chaincode-pdc/collection-config.json

30.	Check for commitrediness as Org2
 	peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name spa-pdc --version ${VERSION} --sequence ${VERSION} --output json --init-required --collections-config ${PWD}/../spa-chaincode-pdc/collection-config.json

31.	Check for commitrediness as Org1
 	source ./scripts/setChannelContext.sh 1
	peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name spa-pdc --version ${VERSION} --sequence ${VERSION} --output json --init-required --collections-config ${PWD}/../spa-chaincode-pdc/collection-config.json
 
32.	Set the peer address for identifying the endorsing peers
 	source ./scripts/setPeerConnectionParam.sh 1 2

33.	Commit the chaincode definition to Channel
 	source ./scripts/setChannelContext.sh 1
 	peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name spa-pdc $PEER_CONN_PARMS --version ${VERSION} --sequence ${VERSION} --init-required --collections-config ${PWD}/../spa-chaincode-pdc/collection-config.json

34.	Query chaincode commit as Org1
	peer lifecycle chaincode querycommitted --channelID $CHANNEL_NAME --name spa-pdc

35.	Query chaincode commit as Org2
	source ./scripts/setChannelContext.sh 2
	peer lifecycle chaincode querycommitted --channelID $CHANNEL_NAME --name spa-pdc

############################################ Chaincode Interaction #####################################################

36. Set Endorsing Peers
	source ./scripts/setPeerConnectionParam.sh 1 2

36. Initialize the chaincode
	source ./scripts/setChannelContext.sh 1
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa $PEER_CONN_PARMS --isInit -c '{"function":"InitLedger","Args":[]}'

37. Register the Users
	export ASSET_PROPERTIES=$(echo -n "{\"name\":\"Calvin\",\"id\":\"1111\",\"address\":\"World of comics,HDFC\",\"sex\":\"Naugthy Boy\"}" | base64 | tr -d \\n)
	export LOGIN=$(echo -n "{\"username\":\"sanath\",\"password\":\"password",\"bank\":\"HDFC\"}" | base64 | tr -d \\n)

	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa $PEER_CONN_PARMS -c '{"function":"Register","Args":["HDFC"]}' --transient "{\"asset_properties\":\"$ASSET_PROPERTIES\"}"
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa $PEER_CONN_PARMS -c '{"function":"RegisterAuth","Args":[]}' --transient "{\"login\":\"$LOGIN\"}"
	peer chaincode query -C mychannel -n spa -c '{"Args":["ReadUserDetails","Calvin@HDFC"]}'

	peer chaincode query -C mychannel -n spa -c '{"Args":["ReadUserFromCollection","HDFCMSPUserCollection","Calvin@HDFC"]}'

38. Approve User KYC Status
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa-pdc $PEER_CONN_PARMS -c '{"function":"ApproveKYCStatus","Args":["Calvin@HDFC"]}'

39. Query the Balance after initialize
	peer chaincode query -C mychannel -n spa-pdc -c '{"Args":["Balance","Calvin@HDFC"]}'
	
40. Switch the context for Org2
	source ./scripts/setChannelContext.sh 2

41. Register the Users
	export ASSET_PROPERTIES=$(echo -n "{\"name\":\"Hobbies\",\"address\":\"World of comics,SBI\",\"sex\":\"A cuddly tiger\"}" | base64 | tr -d \\n)
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa-pdc $PEER_CONN_PARMS -c '{"function":"RegisterUserAccount","Args":["SBI"]}' --transient "{\"asset_properties\":\"$ASSET_PROPERTIES\"}"

42.	Read User Private Details
	peer chaincode query -C mychannel -n spa-pdc -c '{"Args":["ReadUserDetails","Hobbies@SBI"]}'

43.	Read User Private Details With Collection (This will fail due to private Collection access)
	peer chaincode query -C mychannel -n spa-pdc -c '{"Args":["ReadUserFromCollection","HDFCMSPUserCollection","Hobbies@SBI"]}'

44. ApproveKYCStatus
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa-pdc $PEER_CONN_PARMS -c '{"function":"ApproveKYCStatus","Args":["Hobbies@SBI"]}'

45. Query the Balance after initialize
	peer chaincode query -C mychannel -n spa-pdc -c '{"Args":["Balance","Hobbies@SBI"]}'

46. Peer invoke the transfer function
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa-pdc $PEER_CONN_PARMS -c '{"function":"Transfer","Args":["Hobbies@SBI","Calvin@HDFC", "50"]}'

47. Get Account Statement
	peer chaincode query -C mychannel -n spa-pdc -c '{"Args":["GetAccountStatement","Calvin@HDFC"]}'

48. Get All User Balances
	peer chaincode query -C mychannel -n spa-pdc -c '{"Args":["GetAllUserBalanceForOrg","HDFC"]}'

49. Bring Down the Network, when you are done playing around
	./network.sh down