Deep Dive
Instructions: 
1.	Make sure you watch over the logs to check what is happening with various docker instances when the commands are executed
2.	Try and connect to the theory we discussed in the initial days
3.	Always refer to the network.sh and the corresponding shell scripts to understand from the comments what is happening
4.	To watch for logs in the console, make changes to attach the docker logs to console


In the test network folder do the following:

################################# Generate Certificates and System Channel ###############################################

./network.sh up -s couchdb -ca

############################################ Create Channel #####################################################

./network.sh createChannel

############################################ Deploy Chaincode #####################################################

./network.sh deployCC -ccn spa -cccg ${PWD}/../spa-chaincode/collection-config.json

############################################ Chaincode Interaction #####################################################
1. Export necessary environment variables
export PATH=${PWD}/../bin:${PWD}:$PATH
export FABRIC_CFG_PATH=${PWD}/configtx
export CHANNEL_NAME=mychannel

2. Set Endorsing Peers
	source ./scripts/setPeerConnectionParam.sh 1 2

3. Initialize the chaincode
	source ./scripts/setChannelContext.sh 1
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa $PEER_CONN_PARMS -c '{"function":"InitLedger","Args":[]}'

4. Register the Users
export ASSET_PROPERTIES=$(echo -n "{\"name\":\"Calvin\",\"id\":\"1111\",\"address\":\"World of comics,HDFC\",\"sex\":\"Naugthy Boy\"}" | base64 | tr -d \\n)
	export LOGIN=$(echo -n "{\"username\":\"sanath\",\"password\":\"password",\"bank\":\"HDFC\"}" | base64 | tr -d \\n)

	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa $PEER_CONN_PARMS -c '{"function":"Register","Args":["HDFC"]}' --transient "{\"asset_properties\":\"$ASSET_PROPERTIES\"}"
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa $PEER_CONN_PARMS -c '{"function":"RegisterAuth","Args":[]}' --transient "{\"login\":\"$LOGIN\"}"
	
	peer chaincode query -C mychannel -n spa -c '{"Args":["ReadUserDetails","Calvin@HDFC"]}'

	peer chaincode query -C mychannel -n spa -c '{"Args":["ReadUserFromCollection","HDFCMSPUserCollection","Calvin@HDFC"]}'

5. Approve User KYC Status
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa-pdc $PEER_CONN_PARMS -c '{"function":"ApproveKYCStatus","Args":["Calvin@HDFC"]}'

6. Query the Balance after initialize
	peer chaincode query -C mychannel -n spa-pdc -c '{"Args":["Balance","Calvin@HDFC"]}'
	
7. Switch the context for Org2
	source ./scripts/setChannelContext.sh 2

8. Register the Users
	export ASSET_PROPERTIES=$(echo -n "{\"name\":\"Hobbies\",\"address\":\"World of comics,SBI\",\"sex\":\"A cuddly tiger\"}" | base64 | tr -d \\n)
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa-pdc $PEER_CONN_PARMS -c '{"function":"RegisterUserAccount","Args":["SBI"]}' --transient "{\"asset_properties\":\"$ASSET_PROPERTIES\"}"

9.	Read User Private Details
	peer chaincode query -C mychannel -n spa-pdc -c '{"Args":["ReadUserDetails","Hobbies@SBI"]}'

10.	Read User Private Details With Collection (This will fail due to private Collection access)
	peer chaincode query -C mychannel -n spa-pdc -c '{"Args":["ReadUserFromCollection","HDFCMSPUserCollection","Hobbies@SBI"]}'

11. ApproveKYCStatus
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa-pdc $PEER_CONN_PARMS -c '{"function":"ApproveKYCStatus","Args":["Hobbies@SBI"]}'

12. Query the Balance after initialize
	peer chaincode query -C mychannel -n spa-pdc -c '{"Args":["Balance","Hobbies@SBI"]}'

13. Peer invoke the transfer function
	peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA -C mychannel -n spa-pdc $PEER_CONN_PARMS -c '{"function":"Transfer","Args":["Hobbies@SBI","Calvin@HDFC", "50"]}'

14. Get Account Statement
	peer chaincode query -C mychannel -n spa-pdc -c '{"Args":["GetAccountStatement","Calvin@HDFC"]}'

15. Get All User Balances
	peer chaincode query -C mychannel -n spa-pdc -c '{"Args":["GetAllUserBalanceForOrg","HDFC"]}'

############################################ Add a new peer to #####################################################

# Start the new peer

	./scripts/addPeer.sh

	docker ps 

4. Check the channels the older peer has joined
    
    env | grep CORE 

    peer channel list

    peer channel getinfo -c mychannel

5. Check the channle list of the new peer

    export CORE_PEER_LOCALMSPID=HDFCMSP
    export CORE_PEER_ADDRESS=localhost:8051
    export CORE_PEER_TLS_ENABLED=true
    export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/hdfc.example.com/users/Admin@hdfc.example.com/msp
    export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/hdfc.example.com/peers/peer1.hdfc.example.com/tls/ca.crt

    peer channel list

6. Join the channel

    peer channel join -b channel-artifacts/mychannel.block

    peer channel getinfo -c mychannel

7. Query the World State 

    peer chaincode query -C mychannel -n spa-pdc -c '{"Args":["GetAccountStatement","Calvin@HDFC"]}'

    peer lifecycle chaincode install spa-pdc.tar.gz

    docker ps

last. Bring Down the Network, when you are done playing around
	./network.sh down

	docker volume prune